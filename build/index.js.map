{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,kEAAkE;AAClE,4EAA4E;AAC5E,MAAM,YAAY,GAAG,mBAAmB,CAAC,cAAc,CAAC,CAAC;AAWzD;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,OAAO,MAAM,YAAY,CAAC,aAAa,EAAE,CAAC;AAC5C,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,OAAO,MAAM,YAAY,CAAC,aAAa,EAAE,CAAC;AAC5C,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,OAAO,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;AAC7C,CAAC;AAED,eAAe;IACb,aAAa;IACb,aAAa;IACb,cAAc;CACf,CAAC","sourcesContent":["import { requireNativeModule } from 'expo-modules-core';\n\n// It loads the native module object from the JSI or falls back to\n// the bridge module (from NativeModulesProxy) if the remote debugger is on.\nconst PdfClipboard = requireNativeModule('PdfClipboard');\n\nexport interface PDFMetadata {\n  base64: string;\n  pageCount?: number;\n  title?: string;\n  author?: string;\n  creator?: string;\n  fileSize?: number;\n}\n\n/**\n * Checks if the clipboard contains PDF content\n * @returns Promise that resolves to a boolean indicating whether the clipboard has PDF content\n */\nexport async function hasPDFContent(): Promise<boolean> {\n  return await PdfClipboard.hasPDFContent();\n}\n\n/**\n * Gets the PDF content from the clipboard as a base64 string\n * @returns Promise that resolves to a base64 string of the PDF content, or null if no PDF content is available\n */\nexport async function getPDFContent(): Promise<PDFMetadata | null> {\n  return await PdfClipboard.getPDFContent();\n}\n\n/**\n * Clears the clipboard content\n * @returns Promise that resolves when the clipboard is cleared\n */\nexport async function clearClipboard(): Promise<void> {\n  return await PdfClipboard.clearClipboard();\n}\n\nexport default {\n  hasPDFContent,\n  getPDFContent,\n  clearClipboard,\n};"]}